#include <iostream>
#include "../MPointers/include/MPointer.h"
#include "../MPointers/include/MPointerGC.h"

int main() {
    // Inicializar el recolector de basura
    MPointerGC& gc = MPointerGC::getInstance();

    // Crear un MPointer de tipo int
    MPointer<int> mp1 = MPointer<int>::New();
    *mp1 = 10;

    // Crear un segundo MPointer que apunte al mismo objeto
    MPointer<int> mp2 = mp1;

    // Mostrar el estado de la memoria (debug)
    std::cout << "\nEstado de la memoria después de crear mp1 y mp2:" << std::endl;
    gc.debug();

    {
        // Crear un tercer MPointer dentro de un bloque de ámbito que apunte al mismo objeto
        MPointer<int> mp3 = mp1;

        // Mostrar el estado de la memoria (debug)
        std::cout << "\nEstado de la memoria dentro del bloque de ámbito:" << std::endl;
        gc.debug();

        // Al salir de este bloque, mp3 se destruirá automáticamente
    }

    // Mostrar el estado de la memoria después de salir del bloque de ámbito (mp3 destruido)
    std::cout << "\nEstado de la memoria después de salir del bloque de ámbito (destrucción de mp3):" << std::endl;
    gc.debug();

    // Destruir mp2 (reduce el contador de referencias a 1)
    mp2.~MPointer();

    // Mostrar el estado de la memoria después de destruir mp2
    std::cout << "\nEstado de la memoria después de destruir mp2:" << std::endl;
    gc.debug();

    // Forzar la recolección de basura
    std::cout << "\nForzando la recolección de basura..." << std::endl;
    gc.collectGarbage();

    // Mostrar el estado de la memoria después de la recolección de basura
    std::cout << "\nEstado de la memoria después de la recolección de basura:" << std::endl;
    gc.debug();

    // Finalmente, cuando mp1 sale del ámbito, debería quedar en 0 y ser eliminado automáticamente por el GC
    return 0;
}
